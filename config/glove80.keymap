
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_special 1
#define LAYER_games 2

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };
    };
#endif
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {
    
        for: for {
            label = "&FOR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <15>;
            bindings = <&kp F>, <&kp O>, <&kp R>, <&kp LPAR>, <&kp SEMI>, <&kp SEMI>, <&kp RPAR>, <&kp SPACE>, <&kp LBRC>, <&kp RET>;
        };
    
        if: if {
            label = "&IF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <15>;
            bindings = <&kp I>, <&kp F>, <&kp LPAR>, <&kp EQUAL>, <&kp EQUAL>, <&kp RPAR>, <&kp SPACE>, <&kp LBRC>, <&kp RET>;
        };
    
        while: while {
            label = "&WHILE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <15>;
            bindings = <&kp W>, <&kp H>, <&kp I>, <&kp L>, <&kp E>, <&kp LPAR>, <&kp RPAR>, <&kp SPACE>, <&kp LBRC>, <&kp RET>;
        };
    
        main: main {
            label = "&MAIN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp N>, <&kp T>, <&kp SPACE>, <&kp M>, <&kp A>, <&kp I>, <&kp N>, <&kp LPAR>, <&kp RPAR>, <&kp SPACE>, <&kp LBRC>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        homerow_mod: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        homerow_mod_long: homerow_mod_long {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
        };

        homerow_mod_short: homerow_mod_short {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
        };

        perfer_mod: perfer_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
        };
    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
   &kp F18                      &for                &while                        &if                &main                                                                                                                                                                         &kp INT1                    &kp INT2              &kp INT3                  &kp INT4    &kp F21
   &kp F17                    &kp N1                &kp N2                     &kp N3               &kp N4  &kp N5                                                                                                                                              &kp N6               &kp N7                      &kp N8                &kp N9                    &kp N0   &kp BSLH
 &kp EQUAL                     &kp Q                 &kp W                      &kp F                &kp P   &kp B                                                                                                                                               &kp J                &kp L                       &kp U                 &kp Y                  &kp SEMI    &kp SQT
 &kp GRAVE  &homerow_mod_long LALT A  &homerow_mod LCTRL R  &homerow_mod_long LSHFT S  &homerow_mod LGUI T   &kp G                                                                                                                                               &kp M  &homerow_mod RGUI N  &homerow_mod_short LSHFT E  &homerow_mod RCTRL I  &homerow_mod_long LALT O  &kp MINUS
   &kp F16                     &kp Z                 &kp X                      &kp C                &kp D   &kp V  &homerow_mod LSHFT LPAR  &perfer_mod LCTRL F19  &perfer_mod LALT F15  &perfer_mod RALT F14  &perfer_mod RCTRL F20  &homerow_mod RSHFT RPAR   &kp K                &kp H                   &kp COMMA               &kp DOT                  &kp FSLH    &kp F13
     &to 0                     &to 2              &kp LEFT                  &kp RIGHT             &kp LBKT                         &kp BSPC              &lt 1 ESC               &kp DEL               &kp RET              &lt 1 TAB                &kp SPACE                     &kp RBKT                    &kp DOWN                &kp UP                  &kp CAPS    &kp F22
            >;
        };

        layer_special {
            bindings = <
 &bootloader  	       &trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_DN                                                                       &kp C_PREV   &kp C_PP  &kp C_NEXT       &kp KP_NUM  &bootloader
      &trans           &kp F1        &kp F2      &kp F3        &kp F4   &kp F5                                                    &trans     &kp KP_N7  &kp KP_N8   &kp KP_N9     &kp KP_SLASH       &trans
      &trans           &kp F6        &kp F7      &kp F8        &kp F9  &kp F10                                                    &trans     &kp KP_N4  &kp KP_N5   &kp KP_N6  &kp KP_MULTIPLY       &trans
      &trans          &kp F11       &kp F12     &kp F13       &kp F14  &kp F15                                                    &trans     &kp KP_N1  &kp KP_N2   &kp KP_N3     &kp KP_MINUS       &trans
      &trans           &trans        &trans      &trans        &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp CAPS  &kp KP_ENTER  &kp KP_N0  &kp KP_DOT      &kp KP_PLUS       &trans
      &trans           &trans      &kp HOME     &kp END        &trans           &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &kp PG_DN   &kp PG_UP           &trans       &trans
            >;
        };

        layer_games {
            bindings = <
 &trans     &trans  &trans  &trans  &trans                                                                          &trans  &trans  &trans     &trans  &trans
 &trans     &trans  &trans  &trans  &trans  &trans                                                        &trans    &trans  &trans  &trans     &trans  &trans
 &trans      &kp T   &kp G   &kp V  &trans  &trans                                                        &trans    &trans  &trans  &trans     &trans  &trans
 &trans    &kp TAB   &kp Q   &kp W   &kp E   &kp R                                                        &trans    &trans  &trans  &trans     &trans  &trans
 &trans  &kp LCTRL   &kp A   &kp S   &kp D   &kp F     &trans   &trans    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans     &trans  &trans
 &trans  &kp LSHFT   &kp Z   &kp X   &kp C          &kp SPACE  &kp ESC  &kp LALT  &trans  &trans  &trans          &kp LEFT  &trans  &trans  &kp RIGHT  &trans
            >;
        };

    };
};
